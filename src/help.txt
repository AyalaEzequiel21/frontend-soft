import axios, { AxiosError, AxiosResponse } from "axios";
import { useState, useEffect } from "react";

interface apiCallProps<T> {
  method: string;
  path: string;
  body?: T | null;
}

export interface apiResponse<T> {
  data: AxiosResponse<T> | null;
  error: AxiosError | null;
  isLoading: boolean;
}

export const useApiCallFunction = <T, V>({ method, path, body }: apiCallProps<T>): apiResponse<V> => {
  const [data, setData] = useState<AxiosResponse | null>(null);
  const [error, setError] = useState<AxiosError | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);

      try {
        const response = await axios({
          method: method,
          baseURL: "http://localhost:4000/praderaAPI",
          url: path,
          data: body,
        });

        setData(response);
      } catch (err) {
        setError(err as AxiosError);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [method, path, body]); // Dependencias actualizadas

  return { data, error, isLoading };
};